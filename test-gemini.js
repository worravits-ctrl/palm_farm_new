const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

console.log('üîç Testing Gemini API...');
console.log('API Key exists:', !!GEMINI_API_KEY);
console.log('API Key length:', GEMINI_API_KEY ? GEMINI_API_KEY.length : 0);
console.log('API Key starts with:', GEMINI_API_KEY ? GEMINI_API_KEY.substring(0, 10) + '...' : 'undefined');

async function testGemini() {
    try {
        if (!GEMINI_API_KEY || GEMINI_API_KEY === 'your-gemini-api-key-here') {
            throw new Error('GEMINI_API_KEY is not configured properly');
        }

        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

        console.log('ü§ñ Sending test message to Gemini...');
        const result = await model.generateContent('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö');
        const response = await result.response;
        const text = response.text();

        console.log('‚úÖ Gemini API test successful!');
        console.log('üìù Response:', text);
        return true;
    } catch (error) {
        console.error('‚ùå Gemini API test failed:', error.message);
        if (error.message.includes('API_KEY_INVALID')) {
            console.error('üí° API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key ‡πÉ‡∏ô .env file');
        } else if (error.message.includes('PERMISSION_DENIED')) {
            console.error('üí° API Key ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Gemini API');
        } else if (error.message.includes('QUOTA_EXCEEDED')) {
            console.error('üí° ‡πÄ‡∏Å‡∏¥‡∏ô quota ‡∏Ç‡∏≠‡∏á API ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
        }
        return false;
    }
}

testGemini();